note

	description: "Class that covers the Single Unix Spec sys/socket.h header."

	author: "Berend de Boer"


class

	SAPI_SOCKET


feature {NONE} -- Functions

	posix_accept (a_socket: INTEGER; an_address: POINTER; an_address_length: POINTER): INTEGER
			-- Accept a connection on a socket.
			-- The `an_address_length' argument is a value-result
			-- parameter: it should initially contain the size of the
			-- structure pointed to by `an_address'; on return it will
			-- contain the actual length (in bytes) of the address
			-- returned. When `an_address' is NULL nothing is filled in.
			-- The call returns -1 on error. If it succeeds, it returns
			-- a non-negative integer that is a descriptor for the
			-- accepted socket.
		require
			valid_socket: a_socket >= 0
			valid_address_and_length: (an_address /= default_pointer) = (an_address_length /= default_pointer)
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		ensure
			-- Result = -1 implies errno is set
		end

	posix_bind (a_socket: INTEGER; an_address: POINTER; an_address_len: INTEGER): INTEGER
			-- Bind a socket.
		require
			valid_socket: a_socket >= 0
			valid_address: an_address /= default_pointer
			valid_length: an_address_len > 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		ensure
			-- Result = -1 implies errno is set
		end

	posix_connect (a_socket: INTEGER; an_address: POINTER; an_address_len: INTEGER): INTEGER
			-- Connect a socket.
		require
			valid_socket: a_socket >= 0
			valid_address: an_address /= default_pointer
			valid_length: an_address_len > 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		ensure
			-- Result = -1 implies errno is set
		end

	posix_getpeername (a_socket: INTEGER; an_address: POINTER; an_address_length: POINTER): INTEGER
			-- Get name of connected peer.
		require
			valid_socket: a_socket >= 0
			address_not_nil: an_address /= default_pointer
			address_length_not_nil: an_address_length /= default_pointer
		external "C"
		ensure
			-- Result = -1 implies errno is set
		end

	posix_getsockname (a_socket: INTEGER; an_address: POINTER; an_address_length: POINTER): INTEGER
			-- Get socket name.
		require
			valid_socket: a_socket >= 0
			address_not_nil: an_address /= default_pointer
			address_length_not_nil: an_address_length /= default_pointer
		external "C"
		ensure
			-- Result = -1 implies errno is set
		end

	posix_getsockopt (a_socket, a_level, an_option_name: INTEGER; an_option_value: POINTER; an_option_length: POINTER): INTEGER
			-- Get a socket option.
		require
			valid_socket: a_socket >= 0
			option_value_not_nil: an_option_value /= default_pointer
			option_length_not_nil: an_option_length /= default_pointer
		external "C"
		ensure
			-- Result = -1 implies errno is set
		end

	posix_listen (a_socket, a_backlog: INTEGER): INTEGER
			-- Listen for socket connections and limit the queue of
			-- incoming connections. Returns 0 on success, -1 on error.
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		ensure
			-- Result = -1 implies errno is set
		end

	posix_recv (a_socket: INTEGER; buf: POINTER; nbyte: INTEGER; flags: INTEGER): INTEGER
			-- Receives data from a connected or bound socket.
		require
			valid_socket: a_socket >= 0
			valid_buf: buf /= default_pointer
			valid_bytes: nbyte >= 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		end

	posix_recvfrom (a_socket: INTEGER; buf: POINTER; nbyte: INTEGER; flags: INTEGER; a_src_addr: detachable POINTER; an_addrlen: POINTER): INTEGER
			-- Receives data from a connected or bound socket and in
			-- addition returns the sender's address.
			-- Behaves like `posix_recv' if `a_src_addr' is Void.
		require
			valid_socket: a_socket > 0
			valid_buf: buf /= default_pointer
			valid_bytes: nbyte >= 0
			an_addrlen_not_void: (a_src_addr = default_pointer) = (an_addrlen = default_pointer)
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		end

	posix_send (a_socket: INTEGER; buf: POINTER; nbyte: INTEGER; flags: INTEGER): INTEGER
			-- Sends data on a connected socket.
		require
			valid_socket: a_socket >= 0
			valid_buf: buf /= default_pointer
			valid_bytes: nbyte >= 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		end

	posix_sendto (a_socket: INTEGER; buf: POINTER; nbyte: INTEGER; flags: INTEGER; a_dest_addr: POINTER; an_addrlen: INTEGER): INTEGER
			-- Sends data on a connected socket.
		require
			valid_socket: a_socket >= 0
			valid_buf: buf /= default_pointer
			valid_bytes: nbyte >= 0
			valid_destination: a_dest_addr /= default_pointer
			valid_address_length: an_addrlen > 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		end

	posix_setsockopt (a_socket, a_level, an_option_name: INTEGER; an_option_value: POINTER; an_option_length: INTEGER): INTEGER
			-- Set the socket options.
		require
			valid_socket: a_socket >= 0
			option_value_not_nil: an_option_value /= default_pointer
			option_length_positive: an_option_length > 0
		external "C"
		ensure
			-- Result = -1 implies errno is set
		end

	posix_shutdown (a_socket: INTEGER; a_how: INTEGER): INTEGER
			-- Shut down part of a full-duplex connection.
		require
			valid_socket: a_socket >= 0
#ifdef ISE
		external "C blocking"
#else
		external "C"
#endif
		ensure
			-- Result = -1 implies errno is set
		end

	posix_socket (a_family, a_type, a_protocol: INTEGER): INTEGER
			-- Create an endpoint for communication.
		external "C"
		ensure
			-- Result = -1 implies errno is set
		end


feature -- C binding for members of sockaddr

	posix_sockaddr_size: INTEGER
		external "C"
		end

	posix_sockaddr_sa_family (a_sockaddr: POINTER): INTEGER
			-- address family: AF_xxx value
		external "C"
		end

	posix_sockaddr_sa_data (a_sockaddr: POINTER): POINTER
			-- ptr to protocol-specific address buffer
		external "C"
		end

	posix_set_sockaddr_sa_family (a_sockaddr: POINTER; sa_family: INTEGER)
		external "C"
		end


end
